name: Json env

on:
  workflow_dispatch:

  push:
    branches:
      - 'main'
      - 'releases/**'

permissions:
  id-token: write
  contents: read

jobs:
  plan:
    name: test json env
    runs-on: ubuntu-latest
    environment: tfplan


    steps:
    - uses: actions/checkout@v2

    # - name: Log in to Azure using OIDC
    #   uses: azure/login@v1
    #   with:
    #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
    #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    #     enable-AzPSSession: true

    - name: Login using oidc
      #shell: pwsh
      id: tokenForAAD
      run: |
          bearerToken=${ACTIONS_ID_TOKEN_REQUEST_TOKEN}
          runtimeUrl=${ACTIONS_ID_TOKEN_REQUEST_URL}
          runtimeUrl="${runtimeUrl}&audience=api://AzureADTokenExchange"
          echo "JWTTOKEN=$(curl -H "Authorization: bearer $bearerToken" $runtimeUrl | jq -r ".value")" >> $GITHUB_ENV


    - name: Login using oidc
      shell: pwsh
      run: |
          Set-PSRepository -name psgallery -InstallationPolicy Trusted
          install-module az.accounts -requiredversion 2.9.1
          import-module az.accounts
          # get-module az.accounts | out-string
          # $Audience = "api://AzureADTokenExchange"
          # $GitToken = $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN
          # $GitTokenUrl = $env:ACTIONS_ID_TOKEN_REQUEST_URL
          # $apiUrl = "{0}&audience={1}" -f $GitTokenUrl, $Audience

          # $jwt_tokens = Invoke-RestMethod $apiUrl -Headers @{Authorization = ("bearer {0}" -f $GitToken)}
          # $federatedToken = ($jwt_tokens.Value -split "\.")[1]
          # if(($federatedToken.Length % 4) -ne 0) {
          #   $federatedToken = $federatedToken.PadRight($federatedToken.Length + 4 - ($federatedToken.Length % 4), "=")
          # }

          Disable-AzContextAutosave -Scope Process
          $federatedToken = ${{ env.JWTTOKEN }}
          if($federatedToken)
          {
            write-verbose "token present" -verbose
          }
          else
          {
            write-warning "token not obtained"
          }
          try
          {
            Connect-azaccount -TenantId ${{ secrets.AZURE_TENANT_ID }} -ApplicationId ${{ secrets.AZURE_CLIENT_ID }} -federatedtoken $federatedToken -ServicePrincipal -erroraction stop
          }
          catch{
            get-error -newest 1
            #resolve-azerror
            write-verbose "psversiontable"
            #$psversiontable | out-string

            write-verbose "az modules"
            #get-module az*
          }

    # - name: Login using oidc
    #   uses: azure/powershell@v1
    #   with:
    #     inlineScript: |
    #       #$DebugPreference='Continue'
    #       #$psversiontable | out-string
    #       install-module az.accounts
    #       $Audience = "api://AzureADTokenExchange"
    #       $GitToken = $env:ACTIONS_ID_TOKEN_REQUEST_TOKEN
    #       $GitTokenUrl = $env:ACTIONS_ID_TOKEN_REQUEST_URL
    #       $apiUrl = "{0}&audience={1}" -f $GitTokenUrl, $Audience

    #       $jwt_tokens = Invoke-RestMethod $apiUrl -Headers @{Authorization = ("bearer {0}" -f $GitToken)}
    #       $federatedToken = ($jwt_tokens.Value -split "\.")[1]
    #       if(($federatedToken.Length % 4) -ne 0) {
    #         $federatedToken = $federatedToken.PadRight($federatedToken.Length + 4 - ($federatedToken.Length % 4), "=")
    #       }

    #       Disable-AzContextAutosave -Scope Process

    #       try
    #       {
    #         Connect-azaccount -TenantId ${{ secrets.AZURE_TENANT_ID }} -ApplicationId ${{ secrets.AZURE_CLIENT_ID }} -federatedtoken $federatedToken -ServicePrincipal -erroraction stop
    #       }
    #       catch{
    #         get-error -newest 1
    #         resolve-azerror
    #         write-verbose "psversiontable"
    #         $psversiontable | out-string

    #         write-verbose "az modules"
    #         get-module az*
    #       }
    #     azPSVersion: "latest"


    - name: Get secrets - Job__az_oidc_tst__Step-3
      uses: azure/powershell@v1
      with:
        inlineScript: |
          get-azresourcegroup | select -first 1 | out-string
        azPSVersion: "latest"

    # - name: Get ADLS Name and ResourceGroupName - Az PS Inline Script
    #   uses: azure/powershell@v1
    #   id: ADLS_info
    #   with:
    #     inlineScript: |
    #       . ps/Adls_info.ps1 -verbose
    #     azPSVersion: "latest"


    # - name: PowerShell Script - output env vars hash - env vars are case-sensitive
    #   run: |
    #     write-output $env:ADLSStorageAccount
    #     $env:ADLSStorageAccount | convertfrom-json
    #   shell: pwsh

    # - name: PowerShell Script - adls loop
    #   run: |
    #     . ps/use_adls.ps1
    #   shell: pwsh