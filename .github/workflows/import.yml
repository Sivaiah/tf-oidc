name: Import Replace TF

on:
  workflow_dispatch:
    inputs:
      Resources:
        required: true
        type: string
        description: Enter Resource Details
        default: "azurerm_resource_group.myrg2;/subscriptions/376f5cba-5717-4c24-af4c-bfa9fb5cd79e/resourceGroups/myrg2"
      ActivityType:
        required: true
        type: choice
        description: What would you like to do?
        options:
          - replace
          - import
        default: import
      azlogin:
        type: boolean
        description: Login to Azure
        required: true
        default: true

  # push:
  #   branches:
  #     - 'main'
  #     - 'releases/**'


env:
  tf_actions_working_dir: infra

permissions:
  id-token: write
  contents: read

jobs:
  plan:
    name: Azure Resources Import Replace Job
    runs-on: ubuntu-latest
    environment: tfplan
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}

    steps:
    - uses: actions/checkout@v2


    - name: Load Environment variables
      uses: ./.github/actions/set-env-vars-ps-v2
      with:
        varFilePath: .github/variables/state.env::state

    - name: Log in to Azure using OIDC
      if: ${{ inputs.azlogin }}
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}


    - name: Import or Replace Resources
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true
      run: |
        Write-Host "${{inputs.Resources}}"

        $resources = "${{inputs.Resources}}"
        write-verbose $resources -verbose
        $resourceGroups = $resources.Split("::")
        write-verbose ("{0}" -f ($resourceGroups -join ",")) -verbose

        $Activity = "${{inputs.ActivityType}}"
        write-verbose "Activity type is set to: ['$Activity']"

        terraform init -backend-config="resource_group_name=${{ env.backendAzureRmResourceGroupName}}" -backend-config="storage_account_name=${{ env.backendAzureRmStorageAccountName }}" -backend-config="container_name=${{ env.backendAzureRmContainerName }}" -backend-config="key=${{ env.stateFile }}"


        # Import terraform resources
        $resource_array = $resources -split '::'
        foreach ($r in $resource_array)
        {
            $name, $id = $r -split ';'
            Write-Verbose ("Working on ['{0}'] with ID:[{1}]" -f $name, $id) -Verbose
            Write-Verbose "`n" -Verbose

            $resource_output = terraform state show $name

            if($Activity -eq 'import')
            {
                if ($null -eq $resource_output)
                {
                    Write-Verbose "['$name']: Resource not found in state file....proceed to import`n" -Verbose
                    terraform import $name $id
                }
                else
                {
                    Write-Warning "['$name']: Resource already exists in state file so skip import`n"
                }
            }
            elseif($Activity -eq 'replace')
            {
                if ($null -eq $resource_output)
                {
                    Write-Warning "['$name']: Resource not found in state file....so skip replace`n"
                }
                else
                {
                    Write-Verbose "['$name']: Found Resource in state file so proceed with replace`n"
                    terraform apply -replace="$name" --auto-approve
                }
            }
        }

        terraform state list
        #write-error "something wrong" -erroraction stop
      shell: pwsh
